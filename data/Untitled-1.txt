'''class ScratchModel(nn.Module):
    def __init__(self, model, args, device):
        super(ScratchModel, self).__init__()
        
        self.model = DataParallel(model, device_ids=[0]).to(device).train()
        if args['pre_train'] is not None:
            if os.path.exists(args['pre_train']):
                ckpt = torch.load(args['pre_train'], map_location=device)
                self.model.module.load_state_dict(ckpt)
        
        self.preTrainedDense = nn.Sequential(*(list(model.children())[:-11]))
   '''     
        '''
        self.addon = nn.Sequential(
        
            nn.Conv2d(2048, 1024, kernel_size=5,stride=1),
            nn.ReLU(inplace=True),
            nn.LocalResponseNorm(5,alpha=0.0001,beta=0.75,k=2),
            nn.MaxPool2d(3, stride=2),
            
            nn.Conv2d(1024, 512, kernel_size=5,stride=1,padding=2),
            nn.ReLU(inplace=True),
            nn.LocalResponseNorm(5,alpha=0.0001,beta=0.75,k=2),
            nn.MaxPool2d(3, stride=2),
            nn.Dropout2d(p=0.3),

            nn.Conv2d(512,384, kernel_size=3,stride=1,padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(384,256 , kernel_size=3,stride=1,padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(3, stride=2),
            nn.Dropout2d(p=0.3),
        )
        '''
        '''  
        self.fc1 = nn.Sequential(
            nn.Linear(1, 16384),
            nn.ReLU(inplace=True),
            nn.Dropout2d(p=0.5),
            
            nn.Linear(16384, 1024),
            nn.ReLU(inplace=True),
            
            nn.Linear(1024,128),
            nn.ReLU(inplace=True),
            
            nn.Linear(128,1))
        
    def forward_once(self, image):
        # Forward pass 
        output = self.preTrainedDense(image)
        '''
        '''
        output = self.addon(output)
        '''
        '''
        print(output.shape)
        output = self.fc1(output)
        return output
    
    def forward(self, input1, input2):
        output1 = self.forward_once(input1)
        output2 = self.forward_once(input2)
        
        return output1, output2
'''